@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

/*
Makes the image responsive ready
*/
@mixin img-responsive() {
  max-width: 100%;
  height: auto;
  display: block;
  margin: auto;
}

/*
Centers the object based on it's columns
*/
@mixin center-object($elementColumns) {
  $margin: (susy-get(columns) - $elementColumns)/2;
  margin-left: span($margin wide of susy-get(columns)) !important;
}

/*
Rem is similar to the em value, but instead of being relative to the parent element it’s relative to the font-size set in the <html>.
It has all the benefits of em but you don’t get issues with e.g (compounding) since rem is only relative to the html element.
The bad part is there’s no support for rem units in IE8 and below. But with this mixin we can create a fallback to pixels when rem isn’t supported.

@include font-size(14px)
*/

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

/*
@include keyframes(slide-down) {
  0% { opacity: 1; }
  90% { opacity: 0; }
}

.element {
  width: 100px;
  height: 100px;
  background: black;
  @include animation('slide-down 5s 3');
}

*/
@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name} {
    @content;
  }
  @-o-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  @include css3-prefix('animation', $str);
}

/*
a {
  color: gray;
  @include transition(color .3s ease);
  &:hover {
    color: black;
  }
}
*/
@mixin transition($args...) {
  @include css3-prefix('transition', $args);
}

@mixin border-radius($radius: 5px) {
  @include css3-prefix('border-radius', $radius);
}

@mixin resize($direction: both) {
  @include css3-prefix('resize', $direction);
}

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  @include css3-prefix('transform', rotate($deg + deg));
  filter: progid:DXImageTransform.Microsoft.Matrix(M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
  zoom: 1;
}

@mixin clearfix {
  *zoom: 1;
  &:before, &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin input-placeholder {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &:-ms-input-placeholder {
    @content
  }
}

@mixin icon_before($where,$icon) {
  &:#{$where} {
    font-family: FontAwesome;
    content: $icon;
  }
}

@mixin box-shadow($left:0px, $top:2px, $blur:2px, $color:#000, $inset:"") {
  -webkit-box-shadow: $left $top $blur $color #{$inset};
  -moz-box-shadow: $left $top $blur $color #{$inset};
  box-shadow: $left $top $blur $color #{$inset};
}

@mixin rgba_color($type, $parameters:'', $color:'', $opacity:1) {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);
  #{$type}: #{$parameters} rgba($red, $green, $blue, $opacity);
}

@mixin wpr-flex-row {
  @include display-flex();
  @include justify-content(space-around);
  @include flex-flow(row wrap);
}